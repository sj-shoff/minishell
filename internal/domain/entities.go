package domain

// Command - команда, представляющая собой отдельную операцию,
// которую необходимо выполнить в оболочке.
//
// Name:  Имя команды (например, "ls", "cd", "echo").
// Args:  Аргументы, передаваемые команде.
// Input:  Файл, из которого будет читаться ввод (если перенаправление).
// Output: Файл, в который будет записываться вывод (если перенаправление).
// Append: Указывает, нужно ли добавлять вывод в файл (true) или перезаписывать (false) (если перенаправление вывода).
// Background: Указывает, должна ли команда выполняться в фоновом режиме (&).
type Command struct {
	Name       string
	Args       []string
	Input      string
	Output     string
	Append     bool
	Background bool
}

// Pipeline - пайплайн, представляющий собой последовательность команд,
// объединенных операторами (например, "|", "&&", "||").
//
// Commands: Список команд, которые составляют пайплайн.
// Operator: Оператор, который соединяет команды в пайплайне
//
//	("": нет оператора, "|": конвейер, "&&": и, "||": или).
type Pipeline struct {
	Commands []*Command
	Operator string
}

// ExecutionContext - контекст выполнения, который содержит информацию
// о текущем состоянии оболочки (текущая директория, переменные окружения,
// код завершения последней команды и т.д.).
//
// CurrentDir: Текущая рабочая директория.
// Environment: Карта переменных окружения.
// LastExitCode: Код завершения последней выполненной команды.
// IsRunning: Указывает, работает ли еще оболочка.
type ExecutionContext struct {
	CurrentDir   string
	Environment  map[string]string
	LastExitCode int
	IsRunning    bool
}

// CommandResult - результат выполнения команды, содержащий информацию
// о коде завершения, ошибке (если есть) и выводе команды.
//
// ExitCode: Код завершения команды (0 - успех, ненулевое значение - ошибка).
// Error: Ошибка, возникшая при выполнении команды (nil, если ошибок не было).
// Output: Вывод команды в стандартный поток вывода.
type CommandResult struct {
	ExitCode int
	Error    error
	Output   string
}

// ProcessInfo - информация о процессе, запущенном оболочкой.
//
// PID: Идентификатор процесса.
// Cmd: Команда, которая была запущена.
type ProcessInfo struct {
	PID int
	Cmd string
}
